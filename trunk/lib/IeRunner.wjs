/**
 * @file 
 * This module contains code shared by IeTextRuner.wsf and IeGuiRunner.wsf.
 * This file has extension .wjs to distinuish it from other *.js files
 * which are loaded through library path automatically.
 */
var _ieUnitVersion = "2.1";

/** The comman file system object */
var _fso = new ActiveXObject("Scripting.FileSystemObject");

/** The list of JavaScript files needed to be loaded. */
var _jsToLoad;    // javascript file to be loaded.

/** A array that maps test case names to directory paths where the 
 * case source code is located. 
 */
var _caseToPath;  

/** The directory path where the IeRunner is located. */
var _runnerDir = null;
    
/** global reference to the current test case object. */
var _currentCase = null;   // obsolated variable
var _ = null;   

/** Selected case together with select tests. */
var _testSelection = null; 

/** original source file path */
var _orgSrc = null;

/** selected jst files. */
var _selectedJst   = null;

// Activate debugger statements.
var _isDebugging = false;

function RunnerException(errNo, desc) {
    this.number = errNo;
    this.description = desc;
}

function scanCaseName(fpath) {
    var f;
    try {
        f  = _fso.GetFile(fpath);
    } catch(e) {
        throw new RunnerException(1209, "Cannot find file \"" + fpath + "\"");
    }
    
    var fs = f.OpenAsTextStream(1, -2);
    var reg = new RegExp("\\s*function\\s+(\\S+)\\s*\\(")
    while( ! fs.AtEndOfStream ) {
        var line = fs.ReadLine();
        if ( reg.exec(line) != null ) {
            fs.Close();
            return RegExp.$1;
        }
    }
    fs.Close();
    throw new RunnerException(1210, "No test function found in \"" + fpath + "\"");
}

// Find all library directories without invalid paths and duplicates.
function FindLibDirs() {
    var _libPathAll = getRunnerDir();
    var _defaultPath = getDefaultLibPath();
    if ( _defaultPath.length > 0 ) {
        _libPathAll = _libPathAll + ";" + _defaultPath;
    }
    if ( _libPath != null ) {
        _libPathAll = _libPathAll + ";" + _libPath;
    }
    
    // add the dir of the first source file to the path.
    var caseSrcFile = null;
    if ( _orgSrc != null ) {
        caseSrcFile = _orgSrc;        
    } else {
        _libPathAll = _libPathAll + ";." 
        if ( (_selectedJst != null) && (_selectedJst.length > 0) ) {
            caseScrFile = _selectedJst[0];
        }
    }
    if ( caseSrcFile != null ){            
        _libPathAll = _libPathAll + ";" 
            + caseSrcFile.substring(0, caseSrcFile.lastIndexOf("\\"));
    }

    var rowList = _libPathAll.split(";");
    var libDirs = new Array();
    for(var i=0; i<rowList.length; i++) {  
        if (! _fso.FolderExists(rowList[i]) ) continue;                
        var fd  = _fso.GetFolder(rowList[i]);
        
        for(var j=0; j<libDirs.length; j++) {
            if ( fd.path == libDirs[j] ) {
                break;
            }
        }
        if ( j==libDirs.length ) {
            libDirs[j] = fd.path;
        }
    }
    
    return libDirs;
}

/** Find all all *.js files in given list of directories. */
function FindJavaScripts(libDirs) {
    var jsList = new Array();
    for(var i=0; i<libDirs.length; i++) {
        var fd      = _fso.GetFolder(libDirs[i]);
        var fc      = new Enumerator(fd.files);
        for(; !fc.atEnd(); fc.moveNext()) {
            var fpath = "" + fc.item(); 
            if ( fpath.match(/\.js$/) ) {        
                jsList.push( fpath );
            }
        }
    }
    return jsList;
}

/** Parse all .jst and .js scripts in a given list of directories. */
function parseDirectories(libDirs, selectedJst, testSelection) {
    _caseToPath = new Array();
    _jsToLoad   = FindJavaScripts(libDirs);

    var newSelection  = ( testSelection == null ) ? new Array() : testSelection;
    var foundCaseName = new Array();
    
    if ( selectedJst == null ) {      
        // No explicitly selected JST files. We have to scan all directories.  
        for(var i=0; i<libDirs.length; i++) {
            var dirPath = libDirs[i];
            var fd      = _fso.GetFolder(dirPath);
            var fc      = new Enumerator(fd.files);
            for(; !fc.atEnd(); fc.moveNext()) {
                var fpath = "" + fc.item(); 

                if ( fpath.match(/\.jst$/) ) {
                    var caseName = scanCaseName(fpath);
                    if ( foundCaseName[caseName] == 1 ) {
                        throw new RunnerException(1212, 
                            "Multiple case name \"" + caseName + "\"");
                    } else {
                        foundCaseName[caseName] = 1;
                    }
                    if( (testSelection == null) || !(testSelection[caseName] == undefined) ) {
                        _jsToLoad.push(fpath);
                        _caseToPath[caseName] = fpath;
                        if ( testSelection == null ) {
                            newSelection[caseName] = new Array();
                        }                        
                    } 
                }
            }
        }
        
        for(var caseName in testSelection) {
            if ( _caseToPath[caseName] == undefined ) {
                throw new RunnerException(1215, "Cannot find test case " + caseName);
            }
        }
    } else { // cmd provides a list of jst files via -runfiles options
        for(var i=0; i<selectedJst.length; i++) {
            var fpath = selectedJst[i];
            if ( fpath.charAt(1) != ':' ) {
                // convert the relative path to absolute path.
                for(var j=0; j<libDirs.length; j++) {
                    var newpath = libDirs[j] + "\\" + fpath;
                    
                    if ( _fso.FileExists( newpath ) ) {                    
                        fpath = newpath;
                        break;
                    }
                }
                if ( i >= libDirs.length ) {
                    throw new RunnerException(1214, "Cannot find file \"" + fpath + "\"");                    
                }
            } 

            if ( fpath.match(/\.jst$/) ) {
                var caseName = scanCaseName(fpath);
                if ( foundCaseName[caseName] == 1 ) {
                    throw new RunnerException(1213, 
                        "Duplicate case name \"" + caseName + "\"");
                } else {
                    foundCaseName[caseName] = 1;
                }

                _jsToLoad.push(fpath);
                _caseToPath[caseName] = fpath;
                newSelection[caseName] = new Array(); // select all tests in the file.
            } else {
                throw new RunnerException(1211, "Test script must have jst extension: " + fpath);
            }
        }
    }
    
    return newSelection;
}

/** Create object with given test case name. */
function instanciateCase(name) {
    eval("var testCase = new " + name + "()");
    return testCase;
}

/** Return test case file path for given test case name.*/
function getCasePath(caseName) {
    return _caseToPath[caseName];
}

/** Return the directory path of the runner. */
function getRunnerDir() {
    if ( _runnerDir == null ) {
        _runnerDir  = WScript.ScriptFullName;
        _runnerDir  = _runnerDir.substring(0, 
            _runnerDir.lastIndexOf("\\"));
    }
    return _runnerDir;
}

/** Return the default library path depending on IEUNIT_LIB */
function getDefaultLibPath() {
    var wshShell = WScript.CreateObject("WScript.Shell");
    var envs = wshShell.Environment("Process");
    return envs("IEUNIT_LIB");
}

/** Ensure that IeUnit version has higher than required version */
function requireIeUnit(majorV, minorV) {
    var fds = _ieUnitVersion.split("\.");
    var _majorV = fds[0] - 0;
    var _minorV = fds[1] - 0;

    if ( (_majorV < majorV) || ( (majorV==_majorV)&&(_minorV<minorV) ) ) {
        var shell = WScript.CreateObject("WScript.Shell");
        var msg = "One of loaded library requires IeUnit version " 
            + majorV + "." + minorV + " or higher";
        shell.Popup(msg, 5, "Warning", 0);
        WScript.Quit(1);
    }
}
