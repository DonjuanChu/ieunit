/**
 * @file
 * Encapsulates the reporting system, providing XML output
 * functionality. If the IETextRunner.wsf is run with the -xml command line
 * switch, the ToXnk() functionality will be called from here to create the
 * XML file.
 * \n Example usage: cscript/NoLogo ..\..\lib\IeTextRunner.wsf -run <b>-xml c:\output.xml</b>
 * \n The resulting XML file conforms to the <a href="http://www.nunit.org/" target="_blank">NUnit</a> schema, and is capable of being
 * processed by <a href="http://nunit2report.sourceforge.net/" target="blank">NUnit2Report</a> via 
 *<a href="http://nant.sourceforge.net/" target="blank">NAnt</a> to generate an HTML result page
 */

/**
 *	The report object, from this object, TestSuites may be added using the AddTestSuite() method
 * Notice: the TestCase and TestSuite object will add test result through the
 * parent member to a report object.
*/
function report() {
	this.name="IEUnit Tests";	/*! The name to put in the name attribute of the XML */
	this.total=0;
	this.failures=0;
	this.notrun=0;
	this.testSuites=new Array();
	this.date=function() {
		d=new Date();
		return d.getDate() + "/" + (d.getMonth()+1) + "/" + d.getYear();
	};
	
	this.time=function () {
		d=new Date();
		var Hours;	var Mins;		var Time;
		Hours = d.getHours();
		if (Hours >= 12) {Time = " PM";}else {Time = " AM";}
		if (Hours > 12)	Hours -= 12;
		if (Hours == 0)	Hours = 12;
		Mins = d.getMinutes();
		if (Mins < 10) Mins = "0" + Mins;
		return Hours + ':' + Mins + Time;
	};
	
	this.totalTime=function() {
		var totTime=0;
		for (var x=0;x<this.testSuites.length;x++) {
			totTime+=this.testSuites[x].time();
		}
		return totTime;
	};
	
	this.AddTestSuite=function(name) {
			testSuite=new TestSuite(name);
			testSuite.parent=this;
			this.testSuites.push(testSuite);
			return testSuite;
		};

	this.ToXml=function() {
		var xml='<test-results name=\'' + this.name + '\'';
		xml+=' total=\'' + this.total + '\'';
		xml+=' failures=\'' + this.failures + '\'';
		xml+=' not-run=\'' + this.notrun + '\'';
		xml+=' date=\'' + this.date() + '\'';
		xml+=' time=\'' + this.time() + '\'>';
		for (var x=0;x<this.testSuites.length;x++) {
			xml+=this.testSuites[x].toXml();
		}
		xml+=' </test-results>'
		return xml;
	};
	
	this.Save=function(xmlFile) {		
		var fs = _fso.CreateTextFile(xmlFile, true);
		fs.Write(this.ToXml());
		fs.Close();
		fs=null;
	};
}

/**
 * The TestSuite object, from this object, TestCases may be added
 * using the AddTestCase() method
 */
function TestSuite(name, parent) {
	this.name=name;
	this.parent=parent;
	this.success=true;
	this.successes=0;
	this.failures=0;
	this.failCase=function() {
			this.failures++;
			this.parent.failures++;
	}
	this.time=function() {
			var totalTime=0;
			for (var x=0;x<this.testCases.length;x++) {
				totalTime+=this.testCases[x].time
			}
			return totalTime;
		};
	this.testCases=new Array();
	this.AddTestCase=function(name) {
		var testCase=new TestCase(name, this);
		this.testCases.push(testCase);
		this.parent.total++;
		return testCase;
	};
	this.toXml=function() {
		var xml='<test-suite name=\'' + this.name + '\' success=\'' + this.success + '\' time=\'' + this.time() + '\'>';
		xml+='<results>'
		for (var x=0;x<this.testCases.length;x++) {
			xml+=this.testCases[x].toXml();
		}
		xml+='</results></test-suite>';
		return xml;
	};
}

/**
 *	The TestCase object, from this object, TestCases may be flagged as successful of failure
 * by calling succeed(time) or fail(message, time);
 */ 
function TestCase(name, parent) {
	this.name=name;
	this.parent=parent;
	this.executed=true;
	this.success=true;
	this.time=null;
	this.succeed=function(time) {
        this.success=true; 
        this.time=time;
        this.parent.successes++
    };
    
	this.fail=function(message, time) {
        this.time=time;this.success=false; 
        this.failMessage=message;
        this.parent.success=false;
        this.parent.failCase();
    };
    
	this.failMessage=null;
	this.toXml=function() {
		var xml='<test-case name=\'' + this.name + '\' executed=\'' 
            + this.executed + '\' success=\'' + this.success 
            + '\' time=\'' + this.time + '\'>';
		if (this.success==false) {
            xml+='<failure><message><![' + 'CDATA[' 
            + this.failMessage + '\]' + ']></message></failure>';
        }
		xml+='</test-case>';
		return xml;
	};
}

